{
  "docs": [
    
      {
        "icon": "fa-th-large",
        "url": "/documentation/blocks/",
        "title": "Blocks",
        "content": "Blocks are the foundation of workflows. Each one represents a step to be completed.",
        "description": "  Blocks  External Blocks          Hotkey      Service Script        Input Blocks          Root Script      Prefix Script      Keyword        Output Blocks          Copy To Clipboard      Open In Browser      Send Notification      Open File      Show File      User Script      BlocksBlocks are the foundation of Zazu plugins and are defined in the zazu.jsonfile in each plugin. Each one represents a step to be completed. Along the way,each block passes a value from one block to the next. If they fork, each blockwill get their own copy of the current value.Blocks link to other blocks via connections. Once a blocks gets executed,it’s connections will get executed after. You can link to both output and inputblocks. All blocks have connections unless the block explicitly mentionsotherwise.All blocks can have the following properties:  id mixed: Unique identifier of the block, used for logging andconnections.  connections mixed[]: Blocks to execute if one of the results are chosen.  type string: Name of the block you wish to use.Each unique block type can have it’s own properties, listed below with theirdescriptions.If a block is missing a required argument, you will see an error in the PluginDebugger or in the logs in ~/.zazu/log/.External BlocksExternal blocks are ways of accessing Zazu plugins without using the Zazu searchbar. These types of blocks are unique because they cannot be used as a connection.{  \"blocks\": {    \"external\": [      // trigger blocks    ]  }}HotkeyWhen a user hits a specific set of keys, it can activate an input or outputblock of your plugin.A hotkey can be overwritten in the user’s local configuration file.  hotkey string: Key combination to use. [docs]In this example you have a hotkey block named Inverse, when somebody hits thathotkey it goes to the next block PlayPandora which is most likely a userscript.[{  \"id\": \"Inverse\",  \"type\": \"Hotkey\",  \"hotkey\": \"cmd+shift+o\",  \"connections\": [\"PlayPandora\"]}]Service ScriptOften a plugin will need to run jobs in the background for things like indexingfiles or checking the active application. This block allows you to run yourscript on a set interval. Your service is not guaranteed to run on the giveninterval.NOTICE: The connections on this block will be ignored.Variables defined in the configuration will beused as environment variables passed into the script.  interval int: Milliseconds between the time we run the script. Must be &gt;=100.  script string: Path to the node file to execute.[{  \"id\": \"Cache Packages\",  \"type\": \"ServiceScript\",  \"script\": \"cachePackages.js\",  \"interval\": 100}]Below is an example of the Cache Packages block we defined earlier. It fetchesa JSON file from the internet andstore it in the plugin directory under the name packages.json.The pluginContext is provided when your plugin is loaded, and the returnedfunction will be called as needed.// cachePackages.jsconst fs = require('fs')const http = require('http')const path = require('path')module.exports = (pluginContext) =&gt; {  const packageUrl = 'http://zazuapp.org/api/packages.json'  const outputFile = path.join(pluginContext.cwd, 'packages.json')  return (env = {}) =&gt; {    return new Promise((resolve, reject) =&gt; {      http.get(packageUrl, (response) =&gt; {        const chunks = []        response.on('data', (chunk) =&gt; {          chunks.push(chunk.toString())        })        response.on('end', () =&gt; {          resolve(chunks.join(''))        })      })    }).then((data) =&gt; {      return fs.writeFileSync(outputFile, data)    })  }}Input BlocksInput blocks are blocks that are the entry points to your plugin. These usuallyreturn results to be displayed in Zazu. If a search becomes stales, all inputscripts should be able to handle a SIGKILL{  \"blocks\": {    \"input\": [      // input blocks    ]  }}Root ScriptThis allows you to execute a node script with a prefix.  script string: Path to the node file to execute.[{  \"id\": \"Calculator\",  \"type\": \"RootScript\",  \"script\": \"calculator.js\",  \"connections\": [\"Copy\"]}]We call the export with the PluginContext, which should return an objectwith two methods respondsTo and search.The respondsTo method takes a query and asks the plugin if they are willingto respond to that input.The search method takes a query and env and returns aPromise.that resolves with results.The pluginContext is provided when your plugin is loaded, and the returnedfunctions will be called as needed.Variables defined in the configuration will be used asenvironment variables in the script call.// calculator.jsmodule.exports = (pluginContext) =&gt; {  return {    respondsTo: (query) =&gt; {      return query.match(/\\d/)    },    search: (query, env = {}) =&gt; {      return new Promise((resolve, reject) =&gt; {        const value = eval(query)        resolve([          {            icon: 'fa-calculator',            title: value,            subtitle: 'Select item to copy the value to the clipboard.',            value: value,          }        ])      })    },  }}Prefix ScriptThis allows you to execute a node script with a prefix.  prefix string: Prefix to be used before user input.  space boolean: If a space should be between the Prefix and the user input.  args string: Specifies if you want arguments. Possibles values are Required, Optional and None.  script string: Path to the node file to execute.[{  \"id\": \"Calculator\",  \"type\": \"PrefixScript\",  \"prefix\": \"calc\",  \"space\": true,  \"args\": \"Required\",  \"script\": \"calculator.js\",  \"connections\": [\"Copy\"]}]The node script needs to have a curried function that returns a promise. We callthe export with the Plugin Context.The search function can accept a query and the environment variables, and itshould return aPromise.The pluginContext is provided when your plugin is loaded, and the returnedfunction will be called as needed.Variables defined in the configuration will be used asenvironment variables in the script call.// calculator.jsmodule.exports = (pluginContext) =&gt; {  return (query, env = {}) =&gt; {    return new Promise((resolve, reject) =&gt; {      const value = eval(query)      resolve([        {          icon: 'fa-calculator',          title: value,          subtitle: 'Select item to copy the value to the clipboard.',          value: value,        }      ])    })  }}KeywordKeyword blocks are a useful input block, if you don’t need input from the user.Once a user types in part of your keyword, it will display as a result the usercan click on.  keyword string: What the user input should match. Similar to the value in results.  title string: Title of the result that will be displayed, similar to results.  subtitle string: Subtitle of the result that will be displayed, similar to results.  icon string: Font awesome or the relative path to an icon to be displayed next to the result.[{  \"id\": \"Play\",  \"type\": \"Keyword\",  \"keyword\": \"play\",  \"title\": \"Play Pandora\",  \"subtitle\": \"Click to play Pandora!\",  \"icon\": \"fa-play\",  \"connections\": [\"PlayPandora\"]}]Output BlocksOutput blocks happen after an input block, these can do several things like calla script, or copy something to your clipboard.Most of the special attributes allow you to use a variable {value} which willbe replaced with the current value of the result being passed around.{  \"blocks\": {    \"output\": [      // output blocks    ]  }}Copy To ClipboardThis block will copy the given input to the clipboard.  text string: Text to be copied to the clipboard.[{  \"id\": \"Copy\",  \"type\": \"CopyToClipboard\",  \"text\": \"{value}\"}]Open In BrowserOpen up the value in the users default Browser.  url string: URL of the page you wish to open.[{  \"id\": \"Link\",  \"type\": \"OpenInBrowser\",  \"url\": \"{value}\"}]Send NotificationGive the user a notification with a title and a message.  title string: Title of the notification.  message string: Message of the notification.[{  \"id\": \"Notify\",  \"type\": \"SendNotification\",  \"title\": \"Hello world\",  \"message\": \"{value}\"}]Open FileTo open a file in the default application.[{  \"id\": \"Open\",  \"type\": \"OpenFile\"}]Show FileTo show a file in it’s folder.[{  \"id\": \"Show\",  \"type\": \"ShowFile\"}]User ScriptIf you need to process or modify your state, this allows you to run any scripton the current state being passed down.  script string: Path to the node file to execute.[{  \"id\": \"Process\",  \"type\": \"UserScript\",  \"script\": \"process.js\",  \"connections\": [\"Copy\"]}]In the example below we take in a unicode value and output the character thatcorresponds to that unicode value usingString.fromCharCode.The pluginContext is provided when your plugin is loaded, and the returnedfunction will be called as needed.// process.jsmodule.exports = (pluginContext) =&gt; {  return (value, env = {}) =&gt; {    return new Promise((resolve, reject) =&gt; {      resolve(String.fromCharCode(value))    })  }}"
      },
    
      {
        "icon": "fa-sliders",
        "url": "/documentation/configuration/",
        "title": "Personal Configuration",
        "content": "Getting started to configure your Zazu in your dotfiles.",
        "description": "  Configuring Zazu          Hotkey      Theme      Plugins      Display On      Analytics        Portable ModeConfiguring ZazuYour personal configuration lives in ~/.zazurc.json (orC:\\Users\\YOUR_NAME\\.zazurc.json for Windows). Here is an example of the basicusage.{  \"hotkey\": \"alt+space\",  \"theme\": \"tinytacoteam/dark-theme\",  \"displayOn\": \"detect\",  \"plugins\": []}HotkeyThis can be any keyboardacceleratoryou can think of. We recommend using alt+space or cmd+space, but it’s upto you!ThemeThis in the format of a relative GitHub URL. For example tinytacoteam/dark-themewould translate to https://github.com/tinytacoteam/dark-theme.There are a few themes we created that you can pick from, feel freeto fork them and make your own.PluginsPlugins can be in either of two formats. The first is the short GitHub URLformat for example tinytacoteam/dark-theme would translate tohttps://github.com/tinytacoteam/dark-theme.{  \"plugins\": [    \"tinytacoteam/calculator\"  ]}The second format is an object syntax that allows you to add custom variables.These variables will be applied differently based on whichblocks the plugin is using.Variables ARE case sensitive, check with individual plugins for what variablesyou can use to configure it’s behavior.{  \"plugins\": [    {      \"name\": \"tinytacoteam/calculator\",      \"variables\": {        \"OFFSET\": 10      }    }  ]}Display OnThis determines whether Zazu opens in the center of the primary display eachtime it is toggled, or if Zazu will display on the screen you are currentlyworking on.detect, the default behavior,  means Zazu will open at the center of anyscreen that the cursor is hovering over. Any updates to Zazu’s position will besaved for that particular screen but not the others. Each screen’s custom Zazuposition will be used to position Zazu on that screen in subsequent toggles.primary means Zazu will open in the center of the primary display the firsttime it is toggled after launching the application. Any update to Zazu’s screenposition will be saved and Zazu will open at the new position each time it istoggled.Set to detect by default.AnalyticsWe send anonymous usage to New Relic. To opt out ofsending this anonymous data you can set disableAnalytics to true in yourconfiguration.Portable ModeIf you want your configuration within your application folder for portability justcreate a portable directory inside of it. You can copy your configuration files overfrom your home directory if they already exist."
      },
    
      {
        "icon": "fa-user-plus",
        "url": "/documentation/getting-started/",
        "title": "Getting Started",
        "content": "Getting started with Zazu",
        "description": "  Download  Run  Configure  Moving ZazuDownloadYou can go to our Download page to get the latest version of Zazuor build your own. It offers a build for popular operating systems such as Mac,Linux and Windows.RunOnce you open Zazu, it’ll begin to install all your plugins and present you witha notification letting you know that your plugins have been installed. Once yourplugins are installed, you can hit the default launch shortcut alt+space andsee Zazu appear. You can begin to type in commands such as:  13 feet to inches  screensaver  find resume.docxConfigureAll your configuration is in a single file, to make it easy to backup andversion. It’s located in your home directory under ~/.zazurc.json (orC:\\Users\\YOUR_NAME\\.zazurc.json for Windows). Here, you can add some newplugins and remove ones you don’t want. There is more information in ourdocumentation on Personal Configuration.Zazu supports running in portable mode, details are found on the configuration pageMoving ZazuOn some Linux configurations, Zazu doesn’t position itself correctly when itfirst opens. To fix this, parts of your selected theme have “draggable” regions,which allow you to drag Zazu. Since Zazu remembers where it was last opened,it’ll stay in that position."
      },
    
      {
        "icon": "fa-plug",
        "url": "/documentation/plugins/",
        "title": "Creating Plugins",
        "content": "Overview of what is all included in Zazu Plugins",
        "description": "  Getting Started  Plugin Overview          Plugin Fields        Results          Result Fields      Internal Ranking        Blocking Operations  Debugging  Plugin Context          Console      CWD      Clipboard      Native Image        Submitting your pluginGetting StartedThere is a package boilerplateyou can start your packages off of.The best development workflow is to start the project on GitHub, install thebare plugin inside of Zazu and work in the directory Zazu created itself. Forinstance if you installed tinytacoteam/zazu-template it would be located in~/.zazu/plugins/tinytacoteam/zazu-template and if you have GIT installedlocally, this will have origin setup. Once you make your changes you can tellZazu to Reload Configuration to see your change appear in Zazu.Plugin OverviewPlugins, written in Node and JavaScript, provide all the end user behavior.Plugins use a workflow architecture, where some blocksreturn results, and other process data. You can have as many blocks as you wantthat can do their own specific tasks.At the root of every plugin there is a zazu.json file that tells Zazu how tocommunicate with your plugin.{  \"name\": \"Demo Plugin\",  \"icon\": \"icon.png\",  \"stylesheet\": \"dist/main.css\",  \"blocks\": {    \"input\": [      {        \"id\": 1,        \"type\": \"Keyword\",        \"keyword\": \"play\",        \"title\": \"Test Notification\",        \"subtitle\": \"Click to test notifications\",        \"connections\": [2]      }    ],    \"output\": [      {        \"id\": 2,        \"type\": \"SendNotification\",        \"title\": \"Hello world\",        \"message\": \"{value}\"      }    ]  }}Plugin Fields  icon string: If the result does not provide an individual icon, the pluginicon will be used. The icon here is treated as a relative path.  stylesheet string: Optional. Relative path of a compiled stylesheet to beused when a single result is being previewed.  blocks object:  Blocks are the foundations of every great plugin. They areso great, they have their own block page.ResultsThe input blocks in your plugins willneed to return results to Zazu. Here is an example:[    {      \"id\": \"42\",      \"icon\": \"fa-calculator\",      \"title\": \"The answer is 42\",      \"subtitle\": \"Answer to the Ultimate Question of Life, the Universe, and Everything\",      \"preview\": \"&lt;span&gt;42!&lt;/span&gt;\",      \"value\": 42    }]Result Fields  id string: Identifier for internal ranking.  icon string: Supports font awesomeicons as well as relative paths to the icon in your project. If one is notprovided it will fallback tot he icon for your project.  title string: Larger text you see in a result.  subtitle string: Optional. Smaller text under the title.  preview string: Optional. HTML that shows up next to an active result.This will be in an iframe and include any stylesheet for styling.  value mixed: Value is the what is passed from block to block to make yourplugin run. In this case the value 42 as a number would be passed to whateverthe connection block is, which could be tocopy to the clipboard or it couldrun a custom user script.Internal RankingIf you provide results with an id, Zazu will rank frequently clicked itemshigher in the results list. This works well even if you sort the resultsyourself. If you don’t want this behavior, simply don’t add an id to theresult.Blocking OperationsZazu runs your application in the same thread, this is useful so your plugin canshare the same objects between blocks, however if you are planning on running along synchronous job, you should consider using achild_process.forkwithin your block.DebuggingIn the Tray icon, under Development there is a debugger called PluginDebugger that will output info, warnings and errors of all plugins in afilterable interface. Select the plugin you are trying to debug and get logsfor all the blocks being executed.Plugin ContextThe pluginContext object passed to node scripts and contains some usefulfunctions to help enable your scripts.ConsoleThe Plugin Debugger is useful, since we surface information to you to help youdevelop your plugins better. This API allows you to surface your own logs to thePlugin Debugger.  level string: Log level verbose, info, warn or error  message string: Log message to be displayed.  data object: Other misc data that could be useful.module.exports = (pluginContext) =&gt; {  pluginContext.console.log('verbose', 'hello world', {    ping: 'pong',  })}CWDThe current working directory of the node script being ran.const path = require('path')module.exports = (pluginContext) =&gt; {  const outputFile = path.join(pluginContext.cwd, 'output.json')}ClipboardAn instance of the ElectronClipboardinstance.const path = require('path')module.exports = (pluginContext) =&gt; {  const clipboard = pluginContext.clipboard}Native ImageAn instance of the ElectronNative Imageinstance.const path = require('path')module.exports = (pluginContext) =&gt; {  const nativeImage = pluginContext.nativeImage}Submitting your pluginOnce you finish, submit it to the plugin page by making a packagefile in thedocumentation."
      },
    
      {
        "icon": "fa-paint-brush",
        "url": "/documentation/themes/",
        "title": "Creating Themes",
        "content": "Overview of what is all included in Zazu Themes",
        "description": "  Theme Overview          Fields        Previewing your theme  Using your theme  Dragable Regions  Submitting your themeTheme OverviewThe compiled CSS gets included when Zazu is launched. Be sure to include azazu.json file in the root of your project with the following information:{  \"name\": \"Light Theme\",  \"stylesheet\": \"dist/main.css\"}Fields  stylesheet string: A relative path to the CSS to be used when displayingthe Zazu window.Previewing your themeA themeplaybook exists so you canpreview your Zazu theme with a few of the basic cases.Take a look at some of the other themes on the packages page forsome inspiration.Using your themeJust add your relative path to your GitHub repo inside of your personalconfiguration.Dragable RegionsZazu tries to be as small as possible, for this reason we don’t have a titlebar, so themes need to implement “dragable” regions. That way users canreposition Zazu if they need to. To define a dragable region you can add someCSS to your theme.body {  -webkit-app-region: drag;}input {  -webkit-app-region: no-drag;}Submitting your themeOnce you finish, submit it to the themes page by making a packagefile in thedocumentation"
      }
    
  ]
}
